name: Build and Publish Docker image

on:
  push:
    branches:
      - '**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
      DOCKER_IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build images with Docker Compose
        run: |
          docker compose build

      - name: List Docker images
        run: docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.Size}}"

#      - name: Ensure image is correctly tagged
#        run: |
#          if ! docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"; then
#            # Find the built image (assume service name is mukuru-http)
#            IMAGE_ID=$(docker images --format '{{.Repository}}:{{.ID}}' | grep 'mukuru-http' | head -n1 | awk -F: '{print $2}')
#            if [ -n "$IMAGE_ID" ]; then
#              docker tag $IMAGE_ID ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
#            else
#              echo "Could not find built image to retag."
#              exit 1
#            fi
#          fi

      - name: Install Trivy CLI
        run: |
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Docker image for vulnerabilities
        id: trivy_scan
        run: |
          trivy image --severity HIGH,CRITICAL --exit-code 1 --format table ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Check for vulnerabilities
        if: failure()
        run: |
          echo "High or critical severity vulnerabilities found. Failing the pipeline."
          exit 1

      - name: Push images to Docker Hub
        run: |
          docker compose push
